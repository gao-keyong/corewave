$date
   Mon May 22 15:55:23 2023
$end
$version
  2019.2
$end
$timescale
  1ps
$end
$scope module openmips_min_sopc_tb $end
$var reg 1 ! CLOCK_50 $end
$var reg 1 " rst $end
$var reg 1 # rom_ce $end
$var reg 32 $ inst_addr [31:0] $end
$var reg 32 % inst [31:0] $end
$scope module openmips_min_sopc0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var reg 1 # rom_ce $end
$var reg 32 $ inst_addr [31:0] $end
$var wire 32 ( inst [31:0] $end
$scope module openmips0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 32 ( rom_data_i [31:0] $end
$var reg 32 $ rom_addr_o [31:0] $end
$var reg 1 # rom_ce_o $end
$var reg 32 ) pc [31:0] $end
$var reg 32 * id_pc_i [31:0] $end
$var reg 32 + id_inst_i [31:0] $end
$var reg 8 , id_aluop_o [7:0] $end
$var reg 3 - id_alusel_o [2:0] $end
$var reg 32 . id_reg1_o [31:0] $end
$var reg 32 / id_reg2_o [31:0] $end
$var reg 1 0 id_wreg_o $end
$var reg 5 1 id_wd_o [4:0] $end
$var reg 1 2 id_is_in_delayslot_o $end
$var reg 32 3 id_link_address_o [31:0] $end
$var reg 8 4 ex_aluop_i [7:0] $end
$var reg 3 5 ex_alusel_i [2:0] $end
$var reg 32 6 ex_reg1_i [31:0] $end
$var reg 32 7 ex_reg2_i [31:0] $end
$var reg 1 8 ex_wreg_i $end
$var reg 5 9 ex_wd_i [4:0] $end
$var reg 1 : ex_is_in_delayslot_i $end
$var reg 32 ; ex_link_address_i [31:0] $end
$var reg 1 < ex_wreg_o $end
$var reg 5 = ex_wd_o [4:0] $end
$var reg 32 > ex_wdata_o [31:0] $end
$var reg 32 ? ex_hi_o [31:0] $end
$var reg 32 @ ex_lo_o [31:0] $end
$var reg 1 A ex_whilo_o $end
$var reg 1 B mem_wreg_i $end
$var reg 5 C mem_wd_i [4:0] $end
$var reg 32 D mem_wdata_i [31:0] $end
$var reg 32 E mem_hi_i [31:0] $end
$var reg 32 F mem_lo_i [31:0] $end
$var reg 1 G mem_whilo_i $end
$var reg 1 H mem_wreg_o $end
$var reg 5 I mem_wd_o [4:0] $end
$var reg 32 J mem_wdata_o [31:0] $end
$var reg 32 K mem_hi_o [31:0] $end
$var reg 32 L mem_lo_o [31:0] $end
$var reg 1 M mem_whilo_o $end
$var reg 1 N wb_wreg_i $end
$var reg 5 O wb_wd_i [4:0] $end
$var reg 32 P wb_wdata_i [31:0] $end
$var reg 32 Q wb_hi_i [31:0] $end
$var reg 32 R wb_lo_i [31:0] $end
$var reg 1 S wb_whilo_i $end
$var reg 1 T reg1_read $end
$var reg 1 U reg2_read $end
$var reg 32 V reg1_data [31:0] $end
$var reg 32 W reg2_data [31:0] $end
$var reg 5 X reg1_addr [4:0] $end
$var reg 5 Y reg2_addr [4:0] $end
$var reg 32 Z hi [31:0] $end
$var reg 32 [ lo [31:0] $end
$var reg 64 \ hilo_temp_o [63:0] $end
$var reg 2 ] cnt_o [1:0] $end
$var reg 64 ^ hilo_temp_i [63:0] $end
$var reg 2 _ cnt_i [1:0] $end
$var reg 64 ` div_result [63:0] $end
$var reg 1 a div_ready $end
$var reg 32 b div_opdata1 [31:0] $end
$var reg 32 c div_opdata2 [31:0] $end
$var reg 1 d div_start $end
$var reg 1 e div_annul $end
$var reg 1 f signed_div $end
$var reg 1 g is_in_delayslot_i $end
$var reg 1 h is_in_delayslot_o $end
$var reg 1 i next_inst_in_delayslot_o $end
$var reg 1 j id_branch_flag_o $end
$var reg 32 k branch_target_address [31:0] $end
$var reg 6 l stall [5:0] $end
$var reg 1 m stallreq_from_id $end
$var reg 1 n stallreq_from_ex $end
$scope module pc_reg0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 6 o stall [5:0] $end
$var wire 1 p branch_flag_i $end
$var wire 32 q branch_target_address_i [31:0] $end
$var reg 32 ) pc [31:0] $end
$var reg 1 # ce $end
$upscope $end
$scope module if_id0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 6 r stall [5:0] $end
$var wire 32 s if_pc [31:0] $end
$var wire 32 ( if_inst [31:0] $end
$var reg 32 * id_pc [31:0] $end
$var reg 32 + id_inst [31:0] $end
$upscope $end
$scope module id0 $end
$var wire 1 ' rst $end
$var wire 32 t pc_i [31:0] $end
$var wire 32 u inst_i [31:0] $end
$var wire 1 v ex_wreg_i $end
$var wire 32 w ex_wdata_i [31:0] $end
$var wire 5 x ex_wd_i [4:0] $end
$var wire 1 y mem_wreg_i $end
$var wire 32 z mem_wdata_i [31:0] $end
$var wire 5 { mem_wd_i [4:0] $end
$var wire 32 | reg1_data_i [31:0] $end
$var wire 32 } reg2_data_i [31:0] $end
$var wire 1 ~ is_in_delayslot_i $end
$var reg 1 T reg1_read_o $end
$var reg 1 U reg2_read_o $end
$var reg 5 X reg1_addr_o [4:0] $end
$var reg 5 Y reg2_addr_o [4:0] $end
$var reg 8 , aluop_o [7:0] $end
$var reg 3 - alusel_o [2:0] $end
$var reg 32 . reg1_o [31:0] $end
$var reg 32 / reg2_o [31:0] $end
$var reg 5 1 wd_o [4:0] $end
$var reg 1 0 wreg_o $end
$var reg 1 i next_inst_in_delayslot_o $end
$var reg 1 j branch_flag_o $end
$var reg 32 k branch_target_address_o [31:0] $end
$var reg 32 3 link_addr_o [31:0] $end
$var reg 1 2 is_in_delayslot_o $end
$var reg 1 m stallreq $end
$var reg 6 !! op [5:0] $end
$var reg 5 "! op2 [4:0] $end
$var reg 6 #! op3 [5:0] $end
$var reg 5 $! op4 [4:0] $end
$var reg 32 %! imm [31:0] $end
$var reg 1 &! instvalid $end
$var reg 32 '! pc_plus_8 [31:0] $end
$var reg 32 (! pc_plus_4 [31:0] $end
$var reg 32 )! imm_sll2_signedext [31:0] $end
$upscope $end
$scope module regfile1 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 1 *! we $end
$var wire 5 +! waddr [4:0] $end
$var wire 32 ,! wdata [31:0] $end
$var wire 1 -! re1 $end
$var wire 5 .! raddr1 [4:0] $end
$var reg 32 V rdata1 [31:0] $end
$var wire 1 /! re2 $end
$var wire 5 0! raddr2 [4:0] $end
$var reg 32 W rdata2 [31:0] $end
$upscope $end
$scope module id_ex0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 6 1! stall [5:0] $end
$var wire 8 2! id_aluop [7:0] $end
$var wire 3 3! id_alusel [2:0] $end
$var wire 32 4! id_reg1 [31:0] $end
$var wire 32 5! id_reg2 [31:0] $end
$var wire 5 6! id_wd [4:0] $end
$var wire 1 7! id_wreg $end
$var wire 32 8! id_link_address [31:0] $end
$var wire 1 9! id_is_in_delayslot $end
$var wire 1 :! next_inst_in_delayslot_i $end
$var reg 8 4 ex_aluop [7:0] $end
$var reg 3 5 ex_alusel [2:0] $end
$var reg 32 6 ex_reg1 [31:0] $end
$var reg 32 7 ex_reg2 [31:0] $end
$var reg 5 9 ex_wd [4:0] $end
$var reg 1 8 ex_wreg $end
$var reg 32 ; ex_link_address [31:0] $end
$var reg 1 : ex_is_in_delayslot $end
$var reg 1 g is_in_delayslot_o $end
$upscope $end
$scope module ex0 $end
$var wire 1 ' rst $end
$var wire 8 ;! aluop_i [7:0] $end
$var wire 3 <! alusel_i [2:0] $end
$var wire 32 =! reg1_i [31:0] $end
$var wire 32 >! reg2_i [31:0] $end
$var wire 5 ?! wd_i [4:0] $end
$var wire 1 @! wreg_i $end
$var wire 32 A! hi_i [31:0] $end
$var wire 32 B! lo_i [31:0] $end
$var wire 32 C! wb_hi_i [31:0] $end
$var wire 32 D! wb_lo_i [31:0] $end
$var wire 1 E! wb_whilo_i $end
$var wire 32 F! mem_hi_i [31:0] $end
$var wire 32 G! mem_lo_i [31:0] $end
$var wire 1 H! mem_whilo_i $end
$var wire 64 I! hilo_temp_i [63:0] $end
$var wire 2 J! cnt_i [1:0] $end
$var wire 64 K! div_result_i [63:0] $end
$var wire 1 L! div_ready_i $end
$var wire 32 M! link_address_i [31:0] $end
$var wire 1 N! is_in_delayslot_i $end
$var reg 5 = wd_o [4:0] $end
$var reg 1 < wreg_o $end
$var reg 32 > wdata_o [31:0] $end
$var reg 32 ? hi_o [31:0] $end
$var reg 32 @ lo_o [31:0] $end
$var reg 1 A whilo_o $end
$var reg 64 \ hilo_temp_o [63:0] $end
$var reg 2 ] cnt_o [1:0] $end
$var reg 32 b div_opdata1_o [31:0] $end
$var reg 32 c div_opdata2_o [31:0] $end
$var reg 1 d div_start_o $end
$var reg 1 f signed_div_o $end
$var reg 1 n stallreq $end
$var reg 32 O! logicout [31:0] $end
$var reg 32 P! shiftres [31:0] $end
$var reg 32 Q! moveres [31:0] $end
$var reg 32 R! arithmeticres [31:0] $end
$var reg 64 S! mulres [63:0] $end
$var reg 32 T! HI [31:0] $end
$var reg 32 U! LO [31:0] $end
$var reg 32 V! reg2_i_mux [31:0] $end
$var reg 32 W! reg1_i_not [31:0] $end
$var reg 32 X! result_sum [31:0] $end
$var reg 1 Y! ov_sum $end
$var reg 1 Z! reg1_eq_reg2 $end
$var reg 1 [! reg1_lt_reg2 $end
$var reg 32 \! opdata1_mult [31:0] $end
$var reg 32 ]! opdata2_mult [31:0] $end
$var reg 64 ^! hilo_temp [63:0] $end
$var reg 64 _! hilo_temp1 [63:0] $end
$var reg 1 `! stallreq_for_madd_msub $end
$var reg 1 a! stallreq_for_div $end
$upscope $end
$scope module ex_mem0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 6 b! stall [5:0] $end
$var wire 5 c! ex_wd [4:0] $end
$var wire 1 d! ex_wreg $end
$var wire 32 e! ex_wdata [31:0] $end
$var wire 32 f! ex_hi [31:0] $end
$var wire 32 g! ex_lo [31:0] $end
$var wire 1 h! ex_whilo $end
$var wire 64 i! hilo_i [63:0] $end
$var wire 2 j! cnt_i [1:0] $end
$var reg 5 C mem_wd [4:0] $end
$var reg 1 B mem_wreg $end
$var reg 32 D mem_wdata [31:0] $end
$var reg 32 E mem_hi [31:0] $end
$var reg 32 F mem_lo [31:0] $end
$var reg 1 G mem_whilo $end
$var reg 64 ^ hilo_o [63:0] $end
$var reg 2 _ cnt_o [1:0] $end
$upscope $end
$scope module mem0 $end
$var wire 1 ' rst $end
$var wire 5 k! wd_i [4:0] $end
$var wire 1 l! wreg_i $end
$var wire 32 m! wdata_i [31:0] $end
$var wire 32 n! hi_i [31:0] $end
$var wire 32 o! lo_i [31:0] $end
$var wire 1 p! whilo_i $end
$var reg 5 I wd_o [4:0] $end
$var reg 1 H wreg_o $end
$var reg 32 J wdata_o [31:0] $end
$var reg 32 K hi_o [31:0] $end
$var reg 32 L lo_o [31:0] $end
$var reg 1 M whilo_o $end
$upscope $end
$scope module mem_wb0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 6 q! stall [5:0] $end
$var wire 5 r! mem_wd [4:0] $end
$var wire 1 s! mem_wreg $end
$var wire 32 t! mem_wdata [31:0] $end
$var wire 32 u! mem_hi [31:0] $end
$var wire 32 v! mem_lo [31:0] $end
$var wire 1 w! mem_whilo $end
$var reg 5 O wb_wd [4:0] $end
$var reg 1 N wb_wreg $end
$var reg 32 P wb_wdata [31:0] $end
$var reg 32 Q wb_hi [31:0] $end
$var reg 32 R wb_lo [31:0] $end
$var reg 1 S wb_whilo $end
$upscope $end
$scope module hilo_reg0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 1 x! we $end
$var wire 32 y! hi_i [31:0] $end
$var wire 32 z! lo_i [31:0] $end
$var reg 32 Z hi_o [31:0] $end
$var reg 32 [ lo_o [31:0] $end
$upscope $end
$scope module ctrl0 $end
$var wire 1 ' rst $end
$var wire 1 {! stallreq_from_id $end
$var wire 1 |! stallreq_from_ex $end
$var reg 6 l stall [5:0] $end
$upscope $end
$scope module div0 $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 1 }! signed_div_i $end
$var wire 32 ~! opdata1_i [31:0] $end
$var wire 32 !" opdata2_i [31:0] $end
$var wire 1 "" start_i $end
$var wire 1 #" annul_i $end
$var reg 64 ` result_o [63:0] $end
$var reg 1 a ready_o $end
$var reg 33 $" div_temp [32:0] $end
$var reg 6 %" cnt [5:0] $end
$var reg 65 &" dividend [64:0] $end
$var reg 2 '" state [1:0] $end
$var reg 32 (" divisor [31:0] $end
$var reg 32 )" temp_op1 [31:0] $end
$var reg 32 *" temp_op2 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module inst_rom0 $end
$var wire 1 +" ce $end
$var wire 32 ," addr [31:0] $end
$var reg 32 % inst [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
bx !!
b0 !"
1"
bx "!
0""
x#
bx #!
0#"
bx $
bx $!
bx $"
bx %
b0 %!
bx %"
0&
0&!
bx &"
1'
bx '!
bx '"
bx (
bx (!
bx ("
bx )
bx00 )!
bx )"
bx *
x*!
bx *"
bx +
bx +!
x+"
b0 ,
bx ,!
bx ,"
b0 -
0-!
b0 .
b0 .!
b0 /
0/!
00
b0 0!
b0 1
b0 1!
02
b0 2!
b0 3
b0 3!
bx 4
b0 4!
bx 5
b0 5!
bx 6
b0 6!
bx 7
07!
x8
b0 8!
bx 9
09!
x:
0:!
bx ;
bx ;!
x<
bx <!
bx =
bx =!
b0 >
bx >!
b0 ?
bx ?!
b0 @
x@!
0A
bx A!
xB
bx B!
bx C
bx C!
bx D
bx D!
bx E
xE!
bx F
b0 F!
xG
b0 G!
0H
0H!
b0 I
bx I!
b0 J
bx J!
b0 K
bx K!
b0 L
xL!
0M
bx M!
xN
xN!
bx O
b0 O!
bx P
b0 P!
bx Q
b0 Q!
bx R
b0 R!
xS
b0 S!
0T
b0 T!
0U
b0 U!
b0 V
bx V!
b0 W
bx W!
b0 X
bx X!
b0 Y
xY!
bx Z
xZ!
bx [
x[!
b0 \
bx \!
b0 ]
bx ]!
bx ^
bx ^!
bx _
bx _!
bx `
0`!
xa
0a!
b0 b
b0 b!
b0 c
bx c!
0d
xd!
xe
b0 e!
0f
b0 f!
xg
b0 g!
xh
0h!
0i
b0 i!
0j
b0 j!
b0 k
bx k!
b0 l
xl!
0m
bx m!
0n
bx n!
b0 o
bx o!
0p
xp!
b0 q
b0 q!
b0 r
b0 r!
bx s
0s!
bx t
b0 t!
bx u
b0 u!
xv
b0 v!
b0 w
0w!
bx x
xx!
0y
bx y!
b0 z
bx z!
b0 {
0{!
b0 |
0|!
b0 }
0}!
x~
b0 ~!
$end
#10000
1!
0#
b0 %
b0 %!
1&
b1000 '!
b0 '"
b0 (
b100 (!
b0 )!
b0 *
0*!
b0 +
b0 +!
0+"
b0 ,
b0 ,!
b0 -
b0 .
b0 /
00
b0 1
02
b0 3
b0 4
b0 5
b0 6
b0 7
08
b0 9
0:
b0 ;
b0 ;!
0<
b0 <!
b0 =
b0 =!
b0 >
b0 >!
b0 ?
b0 ?!
b0 @
0@!
0A
b0 A!
0B
b0 B!
b0 C
b0 C!
b0 D
b0 D!
b0 E
0E!
b0 F
0G
0H
b0 I
b0 I!
b0 J
b0 J!
b0 K
b0 K!
b0 L
0L!
0M
b0 M!
0N
0N!
b0 O
b0 O!
b0 P
b0 P!
b0 Q
b0 Q!
b0 R
b0 R!
0S
b0 S!
0T
b0 T!
0U
b0 U!
b0 V
b0 V!
b0 W
b11111111111111111111111111111111 W!
b0 X
b0 X!
b0 Y
0Y!
b0 Z
b0 [
0[!
b0 \
b0 \!
b0 ]
b0 ]!
b0 ^
b0 ^!
b0 _
b0 `
0a
b0 b
b0 c
b0 c!
0d
0d!
0f
0g
0i
0j
b0 k
b0 k!
0l!
b0 m!
b0 n!
b0 o!
0p!
b0 t
b0 u
0v
b0 x
0x!
b0 y!
b0 z!
0~
#20000
0!
0&
#30000
1!
b0 $
b0 %
1&
b0 )
b0 ,"
b0 s
#40000
0!
0&
#50000
1!
1&
#60000
0!
0&
#70000
1!
1&
#80000
0!
0&
#90000
1!
1&
#100000
0!
0&
#110000
1!
1&
#120000
0!
0&
#130000
1!
1&
#140000
0!
0&
#150000
1!
1&
#160000
0!
0&
#170000
1!
1&
#180000
0!
0&
#190000
1!
1&
#195000
0"
b0 %!
1&!
0'
b0 ,
b0 -
b0 .
b0 /
00
b0 1
02
b0 3
b0 ?
b0 @
0A
0H
b0 I
b0 J
b0 K
b0 L
0M
b0 O!
b0 P!
b0 Q!
b0 R!
b0 S!
0T
b0 T!
0U
b0 U!
b0 V
b0 W
b0 X
b0 Y
b0 \
b0 ]
b0 b
b0 c
0d
0f
0i
0j
b0 k
b0 l
#200000
0!
0&
#210000
1!
1#
bx %
1&
bx (
1+"
#220000
0!
0&
#230000
1!
b100 $
bx %
b0 %!
1&
b100 )
bx00 )!
bx +
b0 ,
b100 ,"
b0 -
b0 .
bx .!
b0 /
00
bx 0!
bx 1
b0 3
bx 6!
0T
0U
b0 V
b0 W
bx X
bx Y
0i
0j
b0 k
b100 s
bx u
#240000
0!
0&
#250000
1!
b1000 $
bx %
b0 %!
1&
b1100 '!
b1000 (!
b1000 )
b100 *
b0 ,
b1000 ,"
b0 -
b0 .
b0 /
00
bx 1
b0 3
bx 9
0<
bx =
b0 >
bx ?!
0T
0U
bx X
bx Y
bx c!
0i
0j
b0 k
b1000 s
b100 t
bx x
#260000
0!
0&
#270000
1!
b1100 $
bx %
b0 %!
1&
b10000 '!
b1100 (!
b1100 )
b1000 *
b0 ,
b1100 ,"
b0 -
b0 .
b0 /
00
bx 1
b0 3
bx C
0H
bx I
b0 J
b0 K
b0 L
0M
0T
0U
bx X
bx Y
0i
0j
b0 k
bx k!
bx r!
b1100 s
b1000 t
bx {
#280000
0!
0&
#290000
1!
b10000 $
bx %
b0 %!
1&
b10100 '!
b10000 (!
b10000 )
b1100 *
bx +!
b0 ,
b10000 ,"
b0 -
00
bx 1
b0 3
bx O
0T
0U
b0 V
b0 W
bx X
bx Y
0i
0j
b0 k
b10000 s
b1100 t
#300000
0!
0&
#310000
1!
b10100 $
bx %
b0 %!
1&
b11000 '!
b10100 (!
b10100 )
b10000 *
b0 ,
b10100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10100 s
b10000 t
#320000
0!
0&
#330000
1!
b11000 $
bx %
b0 %!
1&
b11100 '!
b11000 (!
b11000 )
b10100 *
b0 ,
b11000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b11000 s
b10100 t
#340000
0!
0&
#350000
1!
b11100 $
bx %
b0 %!
1&
b100000 '!
b11100 (!
b11100 )
b11000 *
b0 ,
b11100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b11100 s
b11000 t
#360000
0!
0&
#370000
1!
b100000 $
bx %
b0 %!
1&
b100100 '!
b100000 (!
b100000 )
b11100 *
b0 ,
b100000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b100000 s
b11100 t
#380000
0!
0&
#390000
1!
b100100 $
bx %
b0 %!
1&
b101000 '!
b100100 (!
b100100 )
b100000 *
b0 ,
b100100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b100100 s
b100000 t
#400000
0!
0&
#410000
1!
b101000 $
bx %
b0 %!
1&
b101100 '!
b101000 (!
b101000 )
b100100 *
b0 ,
b101000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b101000 s
b100100 t
#420000
0!
0&
#430000
1!
b101100 $
bx %
b0 %!
1&
b110000 '!
b101100 (!
b101100 )
b101000 *
b0 ,
b101100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b101100 s
b101000 t
#440000
0!
0&
#450000
1!
b110000 $
bx %
b0 %!
1&
b110100 '!
b110000 (!
b110000 )
b101100 *
b0 ,
b110000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b110000 s
b101100 t
#460000
0!
0&
#470000
1!
b110100 $
bx %
b0 %!
1&
b111000 '!
b110100 (!
b110100 )
b110000 *
b0 ,
b110100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b110100 s
b110000 t
#480000
0!
0&
#490000
1!
b111000 $
bx %
b0 %!
1&
b111100 '!
b111000 (!
b111000 )
b110100 *
b0 ,
b111000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b111000 s
b110100 t
#500000
0!
0&
#510000
1!
b111100 $
bx %
b0 %!
1&
b1000000 '!
b111100 (!
b111100 )
b111000 *
b0 ,
b111100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b111100 s
b111000 t
#520000
0!
0&
#530000
1!
b1000000 $
bx %
b0 %!
1&
b1000100 '!
b1000000 (!
b1000000 )
b111100 *
b0 ,
b1000000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1000000 s
b111100 t
#540000
0!
0&
#550000
1!
b1000100 $
bx %
b0 %!
1&
b1001000 '!
b1000100 (!
b1000100 )
b1000000 *
b0 ,
b1000100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1000100 s
b1000000 t
#560000
0!
0&
#570000
1!
b1001000 $
bx %
b0 %!
1&
b1001100 '!
b1001000 (!
b1001000 )
b1000100 *
b0 ,
b1001000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1001000 s
b1000100 t
#580000
0!
0&
#590000
1!
b1001100 $
bx %
b0 %!
1&
b1010000 '!
b1001100 (!
b1001100 )
b1001000 *
b0 ,
b1001100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1001100 s
b1001000 t
#600000
0!
0&
#610000
1!
b1010000 $
bx %
b0 %!
1&
b1010100 '!
b1010000 (!
b1010000 )
b1001100 *
b0 ,
b1010000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1010000 s
b1001100 t
#620000
0!
0&
#630000
1!
b1010100 $
bx %
b0 %!
1&
b1011000 '!
b1010100 (!
b1010100 )
b1010000 *
b0 ,
b1010100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1010100 s
b1010000 t
#640000
0!
0&
#650000
1!
b1011000 $
bx %
b0 %!
1&
b1011100 '!
b1011000 (!
b1011000 )
b1010100 *
b0 ,
b1011000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1011000 s
b1010100 t
#660000
0!
0&
#670000
1!
b1011100 $
bx %
b0 %!
1&
b1100000 '!
b1011100 (!
b1011100 )
b1011000 *
b0 ,
b1011100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1011100 s
b1011000 t
#680000
0!
0&
#690000
1!
b1100000 $
bx %
b0 %!
1&
b1100100 '!
b1100000 (!
b1100000 )
b1011100 *
b0 ,
b1100000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1100000 s
b1011100 t
#700000
0!
0&
#710000
1!
b1100100 $
bx %
b0 %!
1&
b1101000 '!
b1100100 (!
b1100100 )
b1100000 *
b0 ,
b1100100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1100100 s
b1100000 t
#720000
0!
0&
#730000
1!
b1101000 $
bx %
b0 %!
1&
b1101100 '!
b1101000 (!
b1101000 )
b1100100 *
b0 ,
b1101000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1101000 s
b1100100 t
#740000
0!
0&
#750000
1!
b1101100 $
bx %
b0 %!
1&
b1110000 '!
b1101100 (!
b1101100 )
b1101000 *
b0 ,
b1101100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1101100 s
b1101000 t
#760000
0!
0&
#770000
1!
b1110000 $
bx %
b0 %!
1&
b1110100 '!
b1110000 (!
b1110000 )
b1101100 *
b0 ,
b1110000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1110000 s
b1101100 t
#780000
0!
0&
#790000
1!
b1110100 $
bx %
b0 %!
1&
b1111000 '!
b1110100 (!
b1110100 )
b1110000 *
b0 ,
b1110100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1110100 s
b1110000 t
#800000
0!
0&
#810000
1!
b1111000 $
bx %
b0 %!
1&
b1111100 '!
b1111000 (!
b1111000 )
b1110100 *
b0 ,
b1111000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1111000 s
b1110100 t
#820000
0!
0&
#830000
1!
b1111100 $
bx %
b0 %!
1&
b10000000 '!
b1111100 (!
b1111100 )
b1111000 *
b0 ,
b1111100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b1111100 s
b1111000 t
#840000
0!
0&
#850000
1!
b10000000 $
bx %
b0 %!
1&
b10000100 '!
b10000000 (!
b10000000 )
b1111100 *
b0 ,
b10000000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10000000 s
b1111100 t
#860000
0!
0&
#870000
1!
b10000100 $
bx %
b0 %!
1&
b10001000 '!
b10000100 (!
b10000100 )
b10000000 *
b0 ,
b10000100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10000100 s
b10000000 t
#880000
0!
0&
#890000
1!
b10001000 $
bx %
b0 %!
1&
b10001100 '!
b10001000 (!
b10001000 )
b10000100 *
b0 ,
b10001000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10001000 s
b10000100 t
#900000
0!
0&
#910000
1!
b10001100 $
bx %
b0 %!
1&
b10010000 '!
b10001100 (!
b10001100 )
b10001000 *
b0 ,
b10001100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10001100 s
b10001000 t
#920000
0!
0&
#930000
1!
b10010000 $
bx %
b0 %!
1&
b10010100 '!
b10010000 (!
b10010000 )
b10001100 *
b0 ,
b10010000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10010000 s
b10001100 t
#940000
0!
0&
#950000
1!
b10010100 $
bx %
b0 %!
1&
b10011000 '!
b10010100 (!
b10010100 )
b10010000 *
b0 ,
b10010100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10010100 s
b10010000 t
#960000
0!
0&
#970000
1!
b10011000 $
bx %
b0 %!
1&
b10011100 '!
b10011000 (!
b10011000 )
b10010100 *
b0 ,
b10011000 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10011000 s
b10010100 t
#980000
0!
0&
#990000
1!
b10011100 $
bx %
b0 %!
1&
b10100000 '!
b10011100 (!
b10011100 )
b10011000 *
b0 ,
b10011100 ,"
b0 -
00
bx 1
b0 3
0T
0U
bx X
bx Y
0i
0j
b0 k
b10011100 s
b10011000 t
#1000000
0!
0&
